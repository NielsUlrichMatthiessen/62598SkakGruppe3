import java.awt.Point;
import java.lang.StringBuilder;
import java.util.ArrayList;

public class Board {
	
	 private static Piece[][] board;

	public Board(){	
		generateArray();
		this.board = board = new Piece[16][16];
		
	}
	
	private static void generateArray(){
		
		board[0][0] = new Rook(Black, new Point(0,0));
		board[0][1] = new Knight(Black, new Point(0,1));
		board[0][2] = new Bishop(Black, new Point(0,2));
		board[0][3] = new King(Black, new Point(0,3));
		board[0][3] = new Queen(Black, new Point(0,4));
		board[0][4] = new Bishop(Black, new Point(0,5));
		board[0][5] = new Knight(Black, new Point(0,6));
		board[0][6] = new Rook(Black, new Point(0,7));
		
		board[7][0] = new Rook(White, new Point(7,0));
		board[7][1] = new Knight(White, new Point(7,1));
		board[7][2] = new Bishop(White, new Point(7,2));
		board[7][3] = new King(White, new Point(7,3));
		board[7][3] = new Queen(White, new Point(7,4));
		board[7][4] = new Bishop(White, new Point(7,5));
		board[7][5] = new Knight(White, new Point(7,6));
		board[7][6] = new Rook(White, new Point(7,7));
		
		//Generate pawns
		for(int i = 0; i<8;i++){
	
			Piece[1][i] = new pawn(Black, new Point(1,i));
			Piece[6][i] = new pawn(White, new Point(6,i));	
			
		}
	}
	
	public Piece[][] getPiece(Point position){
		return board[position.x][position.y];
	}
	
	public void movePiece(Piece piece, Point position){
		piece.setCoordinates(position);
	}

	public ArrayList<Point> getLegalMoves(Piece piece){
	
		Point position = piece.getCoordinates();
		ArrayList<Point> legalMoves= piece.getLegalMoves();
		ArrayList<Point> verifiedMoves = new ArrayList<Point>();
		int positionInHex = position.x + position.y * 15;		
		
		for(int i=0; i<legalMoves.size(); i++){

			int legalMovesInHex = positionInHex + legalMoves.get(i).x + legalMoves.get(i).y * 15;
			int wantedPosition = legalMovesInHex + positionInHex;
			
			if((wantedPosition&0x88)==0){
				verifiedMoves.add(legalMoves.get(i));
			}
			
		}
		return verifiedMoves;
	}
	
	private static int hexToDecimal(String s) {
	      String digits = "0123456789ABCDEF";
	      s = s.toUpperCase();
	      int val = 0;
	      for (int i = 0; i < s.length(); i++) {
	          char c = s.charAt(i);
	          int d = digits.indexOf(c);
	          val = 16*val + d;
	      }
	      return val;
	    }
	
	private static int decToHex(int dec) {
		  
	  final int sizeOfIntInHalfBytes = 8;
	  final int numberOfBitsInAHalfByte = 4;
	  final int halfByte = 0x0F;
	  final char[] hexDigits = { 
							    '0', '1', '2', '3', '4', '5', '6', '7', 
							    '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
							   };
	  StringBuilder hexBuilder = new StringBuilder(sizeOfIntInHalfBytes);
	  hexBuilder.setLength(sizeOfIntInHalfBytes);
	  for (int i = sizeOfIntInHalfBytes - 1; i >= 0; --i){
	      int j = dec & halfByte;
	      hexBuilder.setCharAt(i, hexDigits[j]);
	      dec >>= numberOfBitsInAHalfByte;
	  }
	  return Integer.parseInt(hexBuilder.toString()); 
	}

}

